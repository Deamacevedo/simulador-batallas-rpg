import chalk from 'chalk';
import figlet from 'figlet';
import cliProgress from 'cli-progress';

/**
 * Utilidades para hacer que la consola se vea s√∫per genial
 * (SOLID - SRP: Single Responsibility - solo maneja la visualizaci√≥n)
 */
class Display {
    
    // Mostrar t√≠tulo √©pico del juego
    static showTitle() {
        console.clear();
        const title = figlet.textSync('RPG BATTLE', {
            font: 'Big',
            horizontalLayout: 'default',
            verticalLayout: 'default'
        });
        
        console.log(chalk.red.bold(title));
        console.log(chalk.yellow('‚öîÔ∏è  SIMULADOR DE BATALLAS √âPICO  ‚öîÔ∏è\n'));
    }

    // Crear barra de vida genial
    static createHealthBar() {
        return new cliProgress.SingleBar({
            format: '‚ù§Ô∏è  Vida |' + chalk.red('{bar}') + '| {percentage}% | {value}/{total} HP',
            barCompleteChar: '‚ñà',
            barIncompleteChar: '‚ñë',
            hideCursor: true
        });
    }

    // Crear barra de man√° genial
    static createManaBar() {
        return new cliProgress.SingleBar({
            format: 'üîµ Man√° |' + chalk.blue('{bar}') + '| {percentage}% | {value}/{total} MP',
            barCompleteChar: '‚ñà',
            barIncompleteChar: '‚ñë',
            hideCursor: true
        });
    }

    // Mostrar estad√≠sticas de un personaje de forma genial
    static showCharacterStats(character, showBars = true) {
        console.log(chalk.cyan.bold(`\n=== ${character.name} ===`));
        console.log(chalk.yellow(`üè∑Ô∏è  Clase: ${character.type}`));
        console.log(chalk.green(`‚≠ê Nivel: ${character.level}`));
        
        if (showBars) {
            // Barra de vida
            const healthBar = this.createHealthBar();
            healthBar.start(character.maxHealth, character.health);
            healthBar.stop();
            
            // Barra de man√°
            const manaBar = this.createManaBar();
            manaBar.start(character.maxMana, character.mana);
            manaBar.stop();
        }
        
        console.log(chalk.white(`‚öîÔ∏è  Ataque: ${character.attack}`));
        console.log(chalk.gray(`üõ°Ô∏è  Defensa: ${character.defense}`));
        console.log(chalk.yellow(`üí® Velocidad: ${character.speed}`));
        
        // Barra de experiencia simple
        const expPercent = Math.floor((character.exp / character.expToNext) * 100);
        console.log(chalk.magenta(`üìä EXP: ${character.exp}/${character.expToNext} (${expPercent}%)`));
    }

    // Mostrar da√±o de forma √©pica
    static showDamage(attacker, target, damage, special = false) {
        if (special) {
            console.log(chalk.red.bold(`üí• ¬°${attacker.name} inflige ${damage} de da√±o especial a ${target.name}!`));
        } else {
            console.log(chalk.yellow(`‚öîÔ∏è  ${attacker.name} ataca a ${target.name} por ${damage} de da√±o`));
        }
        
        // Mostrar vida restante
        const healthPercent = Math.floor((target.health / target.maxHealth) * 100);
        let healthColor = chalk.green;
        
        if (healthPercent < 30) healthColor = chalk.red;
        else if (healthPercent < 60) healthColor = chalk.yellow;
        
        console.log(healthColor(`   ${target.name} tiene ${target.health}/${target.maxHealth} HP (${healthPercent}%)`));
    }

    // Mostrar curaci√≥n de forma genial
    static showHealing(caster, target, healing) {
        console.log(chalk.green.bold(`‚ú® ${caster.name} cura a ${target.name} por ${healing} puntos!`));
        const healthPercent = Math.floor((target.health / target.maxHealth) * 100);
        console.log(chalk.green(`   ${target.name} ahora tiene ${target.health}/${target.maxHealth} HP (${healthPercent}%)`));
    }

    // Separador √©pico entre turnos
    static showTurnSeparator(turnNumber) {
        console.log(chalk.cyan('\n' + '‚ïê'.repeat(50)));
        console.log(chalk.cyan.bold(`              TURNO ${turnNumber}`));
        console.log(chalk.cyan('‚ïê'.repeat(50) + '\n'));
    }

    // Mostrar resultado de batalla
    static showBattleResult(winner, loser, exp = 0) {
        console.log(chalk.yellow('\n' + 'üèÜ'.repeat(20)));
        console.log(chalk.green.bold(`¬°${winner.name} GANA LA BATALLA! üéâ`));
        console.log(chalk.red(`${loser.name} ha sido derrotado... üíÄ`));
        
        if (exp > 0) {
            console.log(chalk.blue(`${winner.name} gana ${exp} puntos de experiencia!`));
        }
        
        console.log(chalk.yellow('üèÜ'.repeat(20) + '\n'));
    }

    // Mostrar subida de nivel √©pica
    static showLevelUp(character) {
        console.log(chalk.yellow('\n' + '‚ú®'.repeat(30)));
        console.log(chalk.yellow.bold(`¬°${character.name} SUBE AL NIVEL ${character.level}! üéä`));
        console.log(chalk.green('¬°Todas las estad√≠sticas han mejorado!'));
        console.log(chalk.yellow('‚ú®'.repeat(30) + '\n'));
    }

    // Mostrar opciones de batalla de forma genial
    static showBattleOptions(character) {
        console.log(chalk.cyan.bold(`\n--- Turno de ${character.name} ---`));
        console.log(chalk.white('¬øQu√© deseas hacer?'));
    }

    // Mostrar esquivar
    static showDodge(character) {
        console.log(chalk.magenta.bold(`üí® ¬°${character.name} esquiva √°gilmente el ataque!`));
    }

    // Mostrar mensaje de error genial
    static showError(message) {
        console.log(chalk.red.bold(`‚ùå Error: ${message}`));
    }

    // Mostrar mensaje de √©xito
    static showSuccess(message) {
        console.log(chalk.green.bold(`‚úÖ ${message}`));
    }

    // Pausa dram√°tica
    static async pause(seconds = 2) {
        await new Promise(resolve => setTimeout(resolve, seconds * 1000));
    }

    // Presionar enter para continuar
    static async waitForEnter() {
        const inquirer = await import('inquirer');
        await inquirer.default.prompt([
            {
                type: 'input',
                name: 'continue',
                message: chalk.gray('Presiona Enter para continuar...'),
                default: ''
            }
        ]);
    }
}

export default Display;